---
import Icon from './Icon.astro';
import ThemeToggle from './ThemeToggle.astro';
import type { iconPaths } from './IconPaths';

/** Main menu items */
const textLinks: { label: string; href: string }[] = [
	{ label: 'Home', href: '/' },
	{ label: 'Histórico', href: '/work/' },
	{ label: 'Sobre', href: '/about/' },
];

/** Icon links to social media — edit these with links to your profiles! */
const iconLinks: { label: string; href: string; icon: keyof typeof iconPaths }[] = [
	{ label: 'LinkedIn', href: 'https://www.linkedin.com/in/manuelli-oliveira-845324265', icon: 'linkedin-logo' },
	{ label: 'GitHub', href: 'https://github.com/tonooe', icon: 'github-logo' },
];
---

<nav>
	<div class="menu-header">
		<a href="/" class="site-title">
			<Icon icon="cat" color="var(--accent-regular)" size="1.6em" gradient />
			Manu
		</a>
		<menu-button>
			<template>
				<button class="menu-button" aria-expanded="false">
					<span class="sr-only">Menu</span>
					<Icon icon="list" />
				</button>
			</template>
		</menu-button>
	</div>
	<noscript>
		<ul class="nav-items">
			{
				textLinks.map(({ label, href }) => (
					<li>
						<a
							aria-current={Astro.url.pathname === href}
							class:list={[
								'link',
								{
									active:
										Astro.url.pathname === href ||
										(href !== '/' && Astro.url.pathname.startsWith(href)),
								},
							]}
							href={href}
						>
							{label}
						</a>
					</li>
				))
			}
		</ul>
	</noscript>
	<noscript>
		<div class="menu-footer">
			<div class="socials">
				{
					iconLinks.map(({ href, icon, label }) => (
						<a href={href} class="social">
							<span class="sr-only">{label}</span>
							<Icon icon={icon} />
						</a>
					))
				}
			</div>
		</div>
	</noscript>
	<div id="menu-content" hidden>
		<ul class="nav-items">
			{
				textLinks.map(({ label, href }) => (
					<li>
						<a
							aria-current={Astro.url.pathname === href}
							class:list={[
								'link',
								{
									active:
										Astro.url.pathname === href ||
										(href !== '/' && Astro.url.pathname.startsWith(href)),
								},
							]}
							href={href}
						>
							{label}
						</a>
					</li>
				))
			}
		</ul>
		<div class="menu-footer">
			<div class="socials">
				{
					iconLinks.map(({ href, icon, label }) => (
						<a href={href} class="social">
							<span class="sr-only">{label}</span>
							<Icon icon={icon} />
						</a>
					))
				}
			</div>
			<theme-toggle>
				<btn>
					<div class="theme-toggle">
						<div class="switch-background off-shadow">
							<div class="innerSwitch">
								<svg width="285" height="150" viewBox="0 0 208 31" fill="none" xmlns="http://www.w3.org/2000/svg" class="face">
									<path class="mouth" d="M77 30H130V30.3375C130 30.7034 118.136 31 103.5 31C88.8645 31 77 30.7034 77 30.3375V30Z" fill="#E76060" />
									<path class="eye eye-left" d="M60 0.000190258C60 16.5687 46.5685 30.0002 30 30.0002C13.4315 30.0002 0 16.5687 0 0.000190258C0 0.000190258 13.4315 5.5 30 5.5C46.5685 5.5 60 0.000190258 60 0.000190258Z" fill="#474747" />
									<path class="eye eye-right" d="M208 0.999969C208 17.5685 194.569 31 178 31C161.431 31 148 17.5685 148 0.999969C148 0.999969 161.431 9.00001 178 9.00001C194.569 9.00001 208 0.999969 208 0.999969Z" fill="#474747" />
								</svg>
							</div>
						</div>
					</div>
				</btn>
			</theme-toggle>
		</div>
	</div>
</nav>

<script>
	class MenuButton extends HTMLElement {
		constructor() {
			super();
			// Inject menu toggle button when JS runs.
			this.appendChild(this.querySelector('template')!.content.cloneNode(true));
			const btn = this.querySelector('button')!;
			// Hide menu (shown by default to support no-JS browsers).
			const menu = document.getElementById('menu-content')!;
			menu.hidden = true;
			// Add "menu-content" class in JS to avoid covering content in non-JS browsers.
			menu.classList.add('menu-content');
			/** Set whether the menu is currently expanded or collapsed. */
			const setExpanded = (expand: boolean) => {
				btn.setAttribute('aria-expanded', expand ? 'true' : 'false');
				menu.hidden = !expand;
			};
			// Toggle menu visibility when the menu button is clicked.
			btn.addEventListener('click', () => setExpanded(menu.hidden));
			// Hide menu button for large screens.
			const handleViewports = (e: MediaQueryList | MediaQueryListEvent) => {
				setExpanded(e.matches);
				btn.hidden = e.matches;
			};
			const mediaQueries = window.matchMedia('(min-width: 50em)');
			handleViewports(mediaQueries);
			mediaQueries.addEventListener('change', handleViewports);
		}
	}
	customElements.define('menu-button', MenuButton);

	class ThemeToggle extends HTMLElement {
		constructor() {
			super();

			const face = this.querySelector('.innerSwitch')!;

			/** Set the theme to dark/light mode. */
			const setTheme = (dark: boolean) => {
				document.documentElement.classList[dark ? 'add' : 'remove']('theme-dark');
				face.setAttribute('aria-pressed', String(dark));
			};

			// Toggle the theme when a user clicks the button.
			face.addEventListener('click', () => setTheme(!this.isDark()));

			// Initialize button state to reflect current theme.
			setTheme(this.isDark());
		}

		isDark() {
			return document.documentElement.classList.contains('theme-dark');
		}
	}
	customElements.define('theme-toggle', ThemeToggle);

	const eyeOpenL = "M60 30C60 46.5685 46.5685 60 30 60C13.4315 60 0 46.5685 0 30C0 13.4315 13.4315 0 30 0C46.5685 0 60 13.4315 60 30Z";
	const eyeOpenR = "M208 31C208 47.5685 194.569 61 178 61C161.431 61 148 47.5685 148 31C148 14.4315 161.431 1 178 1C194.569 1 208 14.4315 208 31Z";
	const eyeClosedL = "M60 0.000190258C60 16.5687 46.5685 30.0002 30 30.0002C13.4315 30.0002 0 16.5687 0 0.000190258C0 0.000190258 13.4315 5.5 30 5.5C46.5685 5.5 60 0.000190258 60 0.000190258Z";
	const eyeClosedR = "M208 0.999969C208 17.5685 194.569 31 178 31C161.431 31 148 17.5685 148 0.999969C148 0.999969 161.431 9.00001 178 9.00001C194.569 9.00001 208 0.999969 208 0.999969Z";
	const mouthOpen = "M77 60H130V73.5C130 88.1355 118.136 100 103.5 100C88.8645 100 77 88.1355 77 73.5V60Z";
	const mouthClosed = "M77 30H130V30.3375C130 30.7034 118.136 31 103.5 31C88.8645 31 77 30.7034 77 30.3375V30Z";
	const closedEyeLeft = document.querySelector(".eye-left");
	const closedEyeRight = document.querySelector(".eye-right");
	const closedMouth = document.querySelector(".mouth");
	const face = document.querySelector(".innerSwitch");
	const switchBG = document.querySelector(".switch-background");
	const background = document.querySelector("body");
	let switched = false;
	import anime from 'animejs/lib/anime.es.js';
	face.addEventListener("click", () => {
		var tl = anime.timeline({
			easing: "easeOutExpo",
			duration: 525
		});
		tl.add(
			{
				targets: [face],
				translateX: switched ? -1 : 31.25,
				rotate: switched ? -360 : 360,
				backgroundColor: switched ? "rgb(110,240,225)" : "rgb(243,255,148)"
			},
			250
		)
			.add(
				{
					targets: [switchBG, background],
					backgroundColor: switched ? "rgb(91,56,115)" : "rgb(255,117,165)"
				},
				250
			)
			.add(
				{
					targets: ".eye-left",

					d: [
						{
							value: switched ? eyeClosedL : eyeOpenL
						}
					]
				},
				"-=600"
			)
			.add(
				{
					targets: ".eye-right",
					d: [
						{
							value: switched ? eyeClosedR : eyeOpenR
						}
					]
				},
				"-=605"
			)
			.add(
				{
					targets: ".mouth",
					d: [
						{
							value: switched ? mouthClosed : mouthOpen
						}
					]
				},
				"-=605"
			);

		if (switched == true) {
			//if true
			if (switchBG.classList.contains("on-shadow")) {
				switchBG.classList.remove("on-shadow");
			}
			switchBG.classList.add("off-shadow");
			switched = false;
		} else {
			if (switchBG.classList.contains("off-shadow")) {
				switchBG.classList.remove("off-shadow");
			}
			switchBG.classList.add("on-shadow");
			switched = true;
		}
	});

</script>

<style>
	* {
		margin: 0;
		padding: 0;
		box-sizing: border-box;
	}
	html,
	.container {
		width: 100%;
		height: 100%;
		display: flex;
		flex-direction: column;
		justify-content: center;
	}
	:global(.theme-dark) .icon.light::before {
		transform: translateX(100%);
	}

	:global(.theme-dark) .icon.dark,
	:global(html:not(.theme-dark)) .icon.light,
	.switch-background {
		background-color:rgb(91, 56, 115);
		height: 25px;
		width: 56.25px;
		border-radius: 999rem;
		box-shadow: inset 0 0 0 1px var(--accent-overlay);
		transition: box-shadow 1s ease-in;
	}
	.off-shadow {
		box-shadow: 5px 5px 35px rgb(56, 32, 72),
    -5px - 5px 35px rgba(212, 176, 235, 0.636);
	}
	.on-shadow {
		box-shadow: 5px 5px 35px rgb(99, 17, 46),
    -5px -5px 35px rgba(255, 217, 245, 0.468);
	}
	.innerSwitch {
		background-color: #6ef0e1;
		width: 25px;
		height: 25px;
		border-radius: 50%;
		display: flex;
		justify-content: center;
		align-items: center;
	}
	
	//
	//
	nav {
		z-index: 9999;
		position: relative;
		font-family: var(--font-brand);
		font-weight: 500;
		margin-bottom: 3.5rem;
	}
	.face {
		width: 18px;
		padding-bottom: 7.5px;
	}
	.menu-header {
		display: flex;
		justify-content: space-between;
		gap: 0.5rem;
		padding: 1.5rem;
	}

	.site-title {
		display: flex;
		gap: 0.5rem;
		align-items: center;
		line-height: 1.1;
		color: var(--gray-0);
		text-decoration: none;
	}

	.menu-button {
		position: relative;
		display: flex;
		border: 0;
		border-radius: 999rem;
		padding: 0.5rem;
		font-size: 1.5rem;
		color: var(--gray-300);
		background: radial-gradient(var(--gray-900), var(--gray-800) 150%);
		box-shadow: var(--shadow-md);
	}

	.menu-button[aria-expanded='true'] {
		color: var(--gray-0);
		background: linear-gradient(180deg, var(--gray-600), transparent),
			radial-gradient(var(--gray-900), var(--gray-800) 150%);
	}

	.menu-button[hidden] {
		display: none;
	}

	.menu-button::before {
		position: absolute;
		inset: -1px;
		content: '';
		background: var(--gradient-stroke);
		border-radius: 999rem;
		z-index: -1;
	}

	.menu-content {
		position: absolute;
		left: 0;
		right: 0;
	}

	.nav-items {
		margin: 0;
		display: flex;
		flex-direction: column;
		gap: 1rem;
		font-size: var(--text-md);
		line-height: 1.2;
		list-style: none;
		padding: 2rem;
		background-color: var(--gray-999);
		border-bottom: 1px solid var(--gray-800);
	}

	.link {
		display: inline-block;
		color: var(--gray-300);
		text-decoration: none;
	}

	.link.active {
		color: var(--gray-0);
	}

	.menu-footer {
		--icon-size: var(--text-xl);
		--icon-padding: 0.5rem;

		display: flex;
		justify-content: space-between;
		gap: 0.75rem;
		padding: 1.5rem 2rem 1.5rem 1.5rem;
		background-color: var(--gray-999);
		border-radius: 0 0 0.75rem 0.75rem;
		box-shadow: var(--shadow-lg);
	}

	.socials {
		display: flex;
		flex-wrap: wrap;
		gap: 0.625rem;
		font-size: var(--icon-size);
	}

	.social {
		display: flex;
		padding: var(--icon-padding);
		text-decoration: none;
		color: var(--accent-dark);
		transition: color var(--theme-transition);
	}

	.social:hover,
	.social:focus {
		color: var(--accent-text-over);
	}

	.theme-toggle {
		display: flex;
		align-items: center;
		height: calc(var(--icon-size) + 2 * var(--icon-padding));
	}

	@media (min-width: 50em) {
		nav {
			display: grid;
			grid-template-columns: 1fr auto 1fr;
			align-items: center;
			padding: 2.5rem 5rem;
			gap: 1rem;
		}

		.menu-header {
			padding: 0;
		}

		.site-title {
			font-size: var(--text-lg);
		}

		.menu-content {
			display: contents;
		}

		.nav-items {
			position: relative;
			flex-direction: row;
			font-size: var(--text-sm);
			border-radius: 999rem;
			border: 0;
			padding: 0.5rem 0.5625rem;
			background: radial-gradient(var(--gray-900), var(--gray-800) 150%);
			box-shadow: var(--shadow-md);
		}

		.nav-items::before {
			position: absolute;
			inset: -1px;
			content: '';
			background: var(--gradient-stroke);
			border-radius: 999rem;
			z-index: -1;
		}

		.link {
			padding: 0.5rem 1rem;
			border-radius: 999rem;
			transition: color var(--theme-transition), background-color var(--theme-transition);
		}

		.link:hover,
		.link:focus {
			color: var(--gray-100);
			background-color: var(--accent-subtle-overlay);
		}

		.link.active {
			color: var(--accent-text-over);
			background-color: var(--accent-regular);
		}

		.menu-footer {
			--icon-padding: 0.375rem;

			justify-self: flex-end;
			align-items: center;
			padding: 0;
			background-color: transparent;
			box-shadow: none;
		}

		.socials {
			display: none;
		}
	}

	@media (min-width: 60em) {
		.socials {
			display: flex;
			justify-content: flex-end;
			gap: 0;
		}
	}
	@media (forced-colors: active) {
		.link.active {
			color: SelectedItem;
		}
	}
</style>
